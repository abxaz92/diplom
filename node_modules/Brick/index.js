var  Resource = require('deployd/lib/resource')
	,util = require('util')
	,internalClient = require('deployd/lib/internal-client');

var dpd;
function Brick(name, options) {
    Resource.apply(this, arguments);
}
util.inherits(Brick, Resource);
module.exports = Brick;

Brick.prototype.clientGeneration = true;


Brick.prototype.handle = function (ctx, next) {
	try{
	    if(ctx.req && ctx.req.method == 'GET'){
			ctx.done(null, calculator(56.5, 10));
	    } else return next();
	} catch(e){
		console.log(e);
	}
}



function Round2(val){
	val*=1000;
	val=Math.ceil(val);
	val=val/1000;
	return val;
}
function sootv(a){
	if (a==56.5)  return 0.0001920;
	if (a==114.3) return 0.0002375;
	if (a==170.8) return 0.0002568;
	if (a==228.6) return 0.0002812;
	if (a==285.1) return 0.0002341;
	if (a==42.16) return 0.0002058;
	if (a==86.1)  return 0.00026625;
	if (a==128.3) return 0.00025104;
	if (a==172.2) return 0.00029531;
	if (a==214.4) return 0.0003107;
	if (a==27.1) return 0.000237;
	if (a==55.2) return 0.00042187;
	if (a==82.3) return 0.0003052;
	if (a==110.4)return 0.00021875;
	if (a==137.5)return 0.00031885;
	return 1;
}
function calculator(brickType, square){
	calc_result	= Math.ceil(brickType * 1 * square *1);
	return {
		 bricks	: calc_result
		,rastv 	: Round2(calc_result * sootv(brickType * 1))
	}
}



process.server.on('listening', function() {
  dpd = internalClient.build(process.server);
});